services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.21
    restart: always
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - discovery.type=single-node
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: nc -z localhost 9200
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.21
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    healthcheck:
      test: curl http://localhost:5601
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s

  redis:
    image: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: redis-cli --scan --pattern '*' --count 1
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s

  redpanda:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.3
    container_name: redpanda
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: curl http://localhost:9644
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.5.2
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 28080:8080
    healthcheck:
      test: curl http://localhost:8080
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s
    depends_on:
      - redpanda

  timescale:
    image: timescale/timescaledb:latest-pg16
    restart: always
    platform: linux/amd64
    environment:
      POSTGRES_USER: qalipsis_demo
      POSTGRES_PASSWORD: qalipsis
      POSTGRES_DB: qalipsis
    volumes:
      - timescale-volume:/var/lib/postgresql/data
    ports:
      - "25432:5432"

  http-to-kafka:
    image: aerisconsulting/http-to-kafka
    platform: linux/amd64
    command:
      - "--https=true"
      - "--ssl-key=http-server.key"
      - "--ssl-cert=http-server.crt"
      - "--kafka-bootstrap=redpanda:9092"
      - "--kafka-topic=http-request"
    ports:
      - "18080:8080"
      - "18443:8443"
    depends_on:
      - redpanda

  kafka-to-db:
    image: aerisconsulting/qalipsis-demo-microservice:0.1.1
    platform: linux/amd64
    environment:
      - KAFKA_ENABLED=true
      - MESSAGING_KAFKA_LISTENER_ENABLED=true
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - REDIS_URI=redis://redis:6379
      - DATASOURCES_DEFAULT_URL=jdbc:postgresql://timescale:5432/qalipsis
      - DATASOURCES_DEFAULT_USERNAME=qalipsis_demo
      - DATASOURCES_DEFAULT_PASSWORD=qalipsis
      - LIQUIBASE_ENABLED=true
    healthcheck:
      test: curl http://localhost:8080 | grep Welcome
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s
    depends_on:
      - redis
      - redpanda
      - timescale

  influxdb:
    container_name: influxdb-server
    image: influxdb
    restart: always
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: qalipsis
      DOCKER_INFLUXDB_INIT_PASSWORD: qalipsis
      DOCKER_INFLUXDB_INIT_ORG: qalipsis
      DOCKER_INFLUXDB_INIT_BUCKET: iot
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: qalipsis
    ports:
      - "18086:8086"
    healthcheck:
      test: curl http://localhost:8086 | grep "InfluxDB is a time series platform"
      interval: 5s
      timeout: 2s
      retries: 20
      start_period: 10s

  healthy_checker:
    container_name: distributed_healthiness_checker
    image: busybox
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      console:
        condition: service_healthy

volumes:
  elasticsearch-volume:
  timescale-volume: